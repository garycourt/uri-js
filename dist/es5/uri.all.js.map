{"version":3,"file":"uri.all.js","sources":["../../src/index.ts","../../src/schemes/urn-uuid.ts","../../src/schemes/urn.ts","../../src/schemes/mailto.ts","../../src/schemes/wss.ts","../../src/schemes/ws.ts","../../src/schemes/https.ts","../../src/schemes/http.ts","../../src/uri.ts","../../node_modules/punycode/punycode.js","../../src/regexps-iri.ts","../../src/regexps-uri.ts","../../src/util.ts"],"sourcesContent":["import { SCHEMES } from \"./uri\";\n\nimport http from \"./schemes/http\";\nSCHEMES[http.scheme] = http;\n\nimport https from \"./schemes/https\";\nSCHEMES[https.scheme] = https;\n\nimport ws from \"./schemes/ws\";\nSCHEMES[ws.scheme] = ws;\n\nimport wss from \"./schemes/wss\";\nSCHEMES[wss.scheme] = wss;\n\nimport mailto from \"./schemes/mailto\";\nSCHEMES[mailto.scheme] = mailto;\n\nimport urn from \"./schemes/urn\";\nSCHEMES[urn.scheme] = urn;\n\nimport uuid from \"./schemes/urn-uuid\";\nSCHEMES[uuid.scheme] = uuid;\n\nexport * from \"./uri\";\n","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { URNComponents } from \"./urn\";\nimport { SCHEMES } from \"../uri\";\n\nexport interface UUIDComponents extends URNComponents {\n\tuuid?: string;\n}\n\nconst UUID = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/;\nconst UUID_PARSE = /^[0-9A-Fa-f\\-]{36}/;\n\n//RFC 4122\nconst handler:URISchemeHandler<UUIDComponents, URIOptions, URNComponents> = {\n\tscheme : \"urn:uuid\",\n\n\tparse : function (urnComponents:URNComponents, options:URIOptions):UUIDComponents {\n\t\tconst uuidComponents = urnComponents as UUIDComponents;\n\t\tuuidComponents.uuid = uuidComponents.nss;\n\t\tuuidComponents.nss = undefined;\n\n\t\tif (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {\n\t\t\tuuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\n\t\t}\n\n\t\treturn uuidComponents;\n\t},\n\n\tserialize : function (uuidComponents:UUIDComponents, options:URIOptions):URNComponents {\n\t\tconst urnComponents = uuidComponents as URNComponents;\n\t\t//normalize UUID\n\t\turnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\n\t\treturn urnComponents;\n\t},\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { pctEncChar, SCHEMES } from \"../uri\";\n\nexport interface URNComponents extends URIComponents {\n\tnid?:string;\n\tnss?:string;\n}\n\nexport interface URNOptions extends URIOptions {\n\tnid?:string;\n}\n\nconst NID$ = \"(?:[0-9A-Za-z][0-9A-Za-z\\\\-]{1,31})\";\nconst PCT_ENCODED$ = \"(?:\\\\%[0-9A-Fa-f]{2})\";\nconst TRANS$$ = \"[0-9A-Za-z\\\\(\\\\)\\\\+\\\\,\\\\-\\\\.\\\\:\\\\=\\\\@\\\\;\\\\$\\\\_\\\\!\\\\*\\\\'\\\\/\\\\?\\\\#]\";\nconst NSS$ = \"(?:(?:\" + PCT_ENCODED$ + \"|\" + TRANS$$ + \")+)\";\nconst URN_SCHEME = new RegExp(\"^urn\\\\:(\" + NID$ + \")$\");\nconst URN_PATH = new RegExp(\"^(\" + NID$ + \")\\\\:(\" + NSS$ + \")$\");\nconst URN_PARSE = /^([^\\:]+)\\:(.*)/;\nconst URN_EXCLUDED = /[\\x00-\\x20\\\\\\\"\\&\\<\\>\\[\\]\\^\\`\\{\\|\\}\\~\\x7F-\\xFF]/g;\n\n//RFC 2141\nconst handler:URISchemeHandler<URNComponents,URNOptions> = {\n\tscheme : \"urn\",\n\n\tparse : function (components:URIComponents, options:URNOptions):URNComponents {\n\t\tconst matches = components.path && components.path.match(URN_PARSE);\n\t\tlet urnComponents = components as URNComponents;\n\n\t\tif (matches) {\n\t\t\tconst scheme = options.scheme || urnComponents.scheme || \"urn\";\n\t\t\tconst nid = matches[1].toLowerCase();\n\t\t\tconst nss = matches[2];\n\t\t\tconst urnScheme = `${scheme}:${options.nid || nid}`;\n\t\t\tconst schemeHandler = SCHEMES[urnScheme];\n\n\t\t\turnComponents.nid = nid;\n\t\t\turnComponents.nss = nss;\n\t\t\turnComponents.path = undefined;\n\n\t\t\tif (schemeHandler) {\n\t\t\t\turnComponents = schemeHandler.parse(urnComponents, options) as URNComponents;\n\t\t\t}\n\t\t} else {\n\t\t\turnComponents.error = urnComponents.error || \"URN can not be parsed.\";\n\t\t}\n\n\t\treturn urnComponents;\n\t},\n\n\tserialize : function (urnComponents:URNComponents, options:URNOptions):URIComponents {\n\t\tconst scheme = options.scheme || urnComponents.scheme || \"urn\";\n\t\tconst nid = urnComponents.nid;\n\t\tconst urnScheme = `${scheme}:${options.nid || nid}`;\n\t\tconst schemeHandler = SCHEMES[urnScheme];\n\n\t\tif (schemeHandler) {\n\t\t\turnComponents = schemeHandler.serialize(urnComponents, options) as URNComponents;\n\t\t}\n\n\t\tconst uriComponents = urnComponents as URIComponents;\n\t\tconst nss = urnComponents.nss;\n\t\turiComponents.path = `${nid || options.nid}:${nss}`;\n\n\t\treturn uriComponents;\n\t},\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { pctEncChar, pctDecChars, unescapeComponent } from \"../uri\";\nimport punycode from \"punycode\";\nimport { merge, subexp, toUpperCase, toArray } from \"../util\";\n\nexport interface MailtoHeaders {\n\t[hfname:string]:string\n}\n\nexport interface MailtoComponents extends URIComponents {\n\tto:Array<string>,\n\theaders?:MailtoHeaders,\n\tsubject?:string,\n\tbody?:string\n}\n\nconst O:MailtoHeaders = {};\nconst isIRI = true;\n\n//RFC 3986\nconst UNRESERVED$$ = \"[A-Za-z0-9\\\\-\\\\.\\\\_\\\\~\" + (isIRI ? \"\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF\" : \"\") + \"]\";\nconst HEXDIG$$ = \"[0-9A-Fa-f]\";  //case-insensitive\nconst PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$));  //expanded\n\n//RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =\n//const ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\#\\\\$\\\\%\\\\&\\\\'\\\\*\\\\+\\\\-\\\\/\\\\=\\\\?\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QTEXT$$ = \"[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F]\";  //(%d1-8 / %d11-12 / %d14-31 / %d127)\n//const QTEXT$$ = merge(\"[\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E]\", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext\n//const VCHAR$$ = \"[\\\\x21-\\\\x7E]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QP$ = subexp(\"\\\\\\\\\" + merge(\"[\\\\x00\\\\x0D\\\\x0A]\", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext\n//const FWS$ = subexp(subexp(WSP$$ + \"*\" + \"\\\\x0D\\\\x0A\") + \"?\" + WSP$$ + \"+\");\n//const QUOTED_PAIR$ = subexp(subexp(\"\\\\\\\\\" + subexp(VCHAR$$ + \"|\" + WSP$$)) + \"|\" + OBS_QP$);\n//const QUOTED_STRING$ = subexp('\\\\\"' + subexp(FWS$ + \"?\" + QCONTENT$) + \"*\" + FWS$ + \"?\" + '\\\\\"');\nconst ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\$\\\\%\\\\'\\\\*\\\\+\\\\-\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\nconst QTEXT$$ = \"[\\\\!\\\\$\\\\%\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.0-9\\\\<\\\\>A-Z\\\\x5E-\\\\x7E]\";\nconst VCHAR$$ = merge(QTEXT$$, \"[\\\\\\\"\\\\\\\\]\");\nconst DOT_ATOM_TEXT$ = subexp(ATEXT$$ + \"+\" + subexp(\"\\\\.\" + ATEXT$$ + \"+\") + \"*\");\nconst QUOTED_PAIR$ = subexp(\"\\\\\\\\\" + VCHAR$$);\nconst QCONTENT$ = subexp(QTEXT$$ + \"|\" + QUOTED_PAIR$);\nconst QUOTED_STRING$ = subexp('\\\\\"' + QCONTENT$ + \"*\" + '\\\\\"');\n\n//RFC 6068\nconst DTEXT_NO_OBS$$ = \"[\\\\x21-\\\\x5A\\\\x5E-\\\\x7E]\";  //%d33-90 / %d94-126\nconst SOME_DELIMS$$ = \"[\\\\!\\\\$\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\:\\\\@]\";\nconst QCHAR$ = subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$ + \"|\" + SOME_DELIMS$$);\nconst DOMAIN$ = subexp(DOT_ATOM_TEXT$ + \"|\" + \"\\\\[\" + DTEXT_NO_OBS$$ + \"*\" + \"\\\\]\");\nconst LOCAL_PART$ = subexp(DOT_ATOM_TEXT$ + \"|\" + QUOTED_STRING$);\nconst ADDR_SPEC$ = subexp(LOCAL_PART$ + \"\\\\@\" + DOMAIN$);\nconst TO$ = subexp(ADDR_SPEC$ + subexp(\"\\\\,\" + ADDR_SPEC$) + \"*\");\nconst HFNAME$ = subexp(QCHAR$ + \"*\");\nconst HFVALUE$ = HFNAME$;\nconst HFIELD$ = subexp(HFNAME$ + \"\\\\=\" + HFVALUE$);\nconst HFIELDS2$ = subexp(HFIELD$ + subexp(\"\\\\&\" + HFIELD$) + \"*\");\nconst HFIELDS$ = subexp(\"\\\\?\" + HFIELDS2$);\nconst MAILTO_URI = new RegExp(\"^mailto\\\\:\" + TO$ + \"?\" + HFIELDS$ + \"?$\");\n\nconst UNRESERVED = new RegExp(UNRESERVED$$, \"g\");\nconst PCT_ENCODED = new RegExp(PCT_ENCODED$, \"g\");\nconst NOT_LOCAL_PART = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", '[\\\\\"]', VCHAR$$), \"g\");\nconst NOT_DOMAIN = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", \"[\\\\[]\", DTEXT_NO_OBS$$, \"[\\\\]]\"), \"g\");\nconst NOT_HFNAME = new RegExp(merge(\"[^]\", UNRESERVED$$, SOME_DELIMS$$), \"g\");\nconst NOT_HFVALUE = NOT_HFNAME;\nconst TO = new RegExp(\"^\" + TO$ + \"$\");\nconst HFIELDS = new RegExp(\"^\" + HFIELDS2$ + \"$\");\n\nfunction decodeUnreserved(str:string):string {\n\tconst decStr = pctDecChars(str);\n\treturn (!decStr.match(UNRESERVED) ? str : decStr);\n}\n\nconst handler:URISchemeHandler<MailtoComponents> =  {\n\tscheme : \"mailto\",\n\n\tparse : function (components:URIComponents, options:URIOptions):MailtoComponents {\n\t\tconst mailtoComponents = components as MailtoComponents;\n\t\tconst to = mailtoComponents.to = (mailtoComponents.path ? mailtoComponents.path.split(\",\") : []);\n\t\tmailtoComponents.path = undefined;\n\n\t\tif (mailtoComponents.query) {\n\t\t\tlet unknownHeaders = false\n\t\t\tconst headers:MailtoHeaders = {};\n\t\t\tconst hfields = mailtoComponents.query.split(\"&\");\n\n\t\t\tfor (let x = 0, xl = hfields.length; x < xl; ++x) {\n\t\t\t\tconst hfield = hfields[x].split(\"=\");\n\n\t\t\t\tswitch (hfield[0]) {\n\t\t\t\t\tcase \"to\":\n\t\t\t\t\t\tconst toAddrs = hfield[1].split(\",\");\n\t\t\t\t\t\tfor (let x = 0, xl = toAddrs.length; x < xl; ++x) {\n\t\t\t\t\t\t\tto.push(toAddrs[x]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"subject\":\n\t\t\t\t\t\tmailtoComponents.subject = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"body\":\n\t\t\t\t\t\tmailtoComponents.body = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tunknownHeaders = true;\n\t\t\t\t\t\theaders[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (unknownHeaders) mailtoComponents.headers = headers;\n\t\t}\n\n\t\tmailtoComponents.query = undefined;\n\n\t\tfor (let x = 0, xl = to.length; x < xl; ++x) {\n\t\t\tconst addr = to[x].split(\"@\");\n\n\t\t\taddr[0] = unescapeComponent(addr[0]);\n\n\t\t\tif (!options.unicodeSupport) {\n\t\t\t\t//convert Unicode IDN -> ASCII IDN\n\t\t\t\ttry {\n\t\t\t\t\taddr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tmailtoComponents.error = mailtoComponents.error || \"Email address's domain name can not be converted to ASCII via punycode: \" + e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\taddr[1] = unescapeComponent(addr[1], options).toLowerCase();\n\t\t\t}\n\n\t\t\tto[x] = addr.join(\"@\");\n\t\t}\n\n\t\treturn mailtoComponents;\n\t},\n\n\tserialize : function (mailtoComponents:MailtoComponents, options:URIOptions):URIComponents {\n\t\tconst components = mailtoComponents as URIComponents;\n\t\tconst to = toArray(mailtoComponents.to);\n\t\tif (to) {\n\t\t\tfor (let x = 0, xl = to.length; x < xl; ++x) {\n\t\t\t\tconst toAddr = String(to[x]);\n\t\t\t\tconst atIdx = toAddr.lastIndexOf(\"@\");\n\t\t\t\tconst localPart = (toAddr.slice(0, atIdx)).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);\n\t\t\t\tlet domain = toAddr.slice(atIdx + 1);\n\n\t\t\t\t//convert IDN via punycode\n\t\t\t\ttry {\n\t\t\t\t\tdomain = (!options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcomponents.error = components.error || \"Email address's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n\t\t\t\t}\n\n\t\t\t\tto[x] = localPart + \"@\" + domain;\n\t\t\t}\n\n\t\t\tcomponents.path = to.join(\",\");\n\t\t}\n\n\t\tconst headers = mailtoComponents.headers = mailtoComponents.headers || {};\n\n\t\tif (mailtoComponents.subject) headers[\"subject\"] = mailtoComponents.subject;\n\t\tif (mailtoComponents.body) headers[\"body\"] = mailtoComponents.body;\n\n\t\tconst fields = [];\n\t\tfor (const name in headers) {\n\t\t\tif (headers[name] !== O[name]) {\n\t\t\t\tfields.push(\n\t\t\t\t\tname.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) +\n\t\t\t\t\t\"=\" +\n\t\t\t\t\theaders[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (fields.length) {\n\t\t\tcomponents.query = fields.join(\"&\");\n\t\t}\n\n\t\treturn components;\n\t}\n}\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport ws from \"./ws\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"wss\",\n\tdomainHost : ws.domainHost,\n\tparse : ws.parse,\n\tserialize : ws.serialize\n}\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\n\nexport interface WSComponents extends URIComponents {\n\tresourceName?: string;\n\tsecure?: boolean;\n}\n\nfunction isSecure(wsComponents:WSComponents):boolean {\n\treturn typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === \"wss\";\n}\n\n//RFC 6455\nconst handler:URISchemeHandler = {\n\tscheme : \"ws\",\n\n\tdomainHost : true,\n\n\tparse : function (components:URIComponents, options:URIOptions):WSComponents {\n\t\tconst wsComponents = components as WSComponents;\n\n\t\t//indicate if the secure flag is set\n\t\twsComponents.secure = isSecure(wsComponents);\n\n\t\t//construct resouce name\n\t\twsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');\n\t\twsComponents.path = undefined;\n\t\twsComponents.query = undefined;\n\n\t\treturn wsComponents;\n\t},\n\n\tserialize : function (wsComponents:WSComponents, options:URIOptions):URIComponents {\n\t\t//normalize the default port\n\t\tif (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === \"\") {\n\t\t\twsComponents.port = undefined;\n\t\t}\n\n\t\t//ensure scheme matches secure flag\n\t\tif (typeof wsComponents.secure === 'boolean') {\n\t\t\twsComponents.scheme = (wsComponents.secure ? 'wss' : 'ws');\n\t\t\twsComponents.secure = undefined;\n\t\t}\n\n\t\t//reconstruct path from resource name\n\t\tif (wsComponents.resourceName) {\n\t\t\tconst [path, query] = wsComponents.resourceName.split('?');\n\t\t\twsComponents.path = (path && path !== '/' ? path : undefined);\n\t\t\twsComponents.query = query;\n\t\t\twsComponents.resourceName = undefined;\n\t\t}\n\n\t\t//forbid fragment component\n\t\twsComponents.fragment = undefined;\n\n\t\treturn wsComponents;\n\t}\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport http from \"./http\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"https\",\n\tdomainHost : http.domainHost,\n\tparse : http.parse,\n\tserialize : http.serialize\n}\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"http\",\n\n\tdomainHost : true,\n\n\tparse : function (components:URIComponents, options:URIOptions):URIComponents {\n\t\t//report missing host\n\t\tif (!components.host) {\n\t\t\tcomponents.error = components.error || \"HTTP URIs must have a host.\";\n\t\t}\n\n\t\treturn components;\n\t},\n\n\tserialize : function (components:URIComponents, options:URIOptions):URIComponents {\n\t\tconst secure = String(components.scheme).toLowerCase() === \"https\";\n\n\t\t//normalize the default port\n\t\tif (components.port === (secure ? 443 : 80) || components.port === \"\") {\n\t\t\tcomponents.port = undefined;\n\t\t}\n\t\t\n\t\t//normalize the empty path\n\t\tif (!components.path) {\n\t\t\tcomponents.path = \"/\";\n\t\t}\n\n\t\t//NOTE: We do not parse query strings for HTTP URIs\n\t\t//as WWW Form Url Encoded query strings are part of the HTML4+ spec,\n\t\t//and not the HTTP spec.\n\n\t\treturn components;\n\t}\n};\n\nexport default handler;","/**\n * URI.js\n *\n * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/uri-js\n */\n\n/**\n * Copyright 2011 Gary Court. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are\n * permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice, this list of\n *       conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above copyright notice, this list\n *       of conditions and the following disclaimer in the documentation and/or other materials\n *       provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation are those of the\n * authors and should not be interpreted as representing official policies, either expressed\n * or implied, of Gary Court.\n */\n\nimport URI_PROTOCOL from \"./regexps-uri\";\nimport IRI_PROTOCOL from \"./regexps-iri\";\nimport punycode from \"punycode\";\nimport { toUpperCase, typeOf, assign } from \"./util\";\n\nexport interface URIComponents {\n\tscheme?:string;\n\tuserinfo?:string;\n\thost?:string;\n\tport?:number|string;\n\tpath?:string;\n\tquery?:string;\n\tfragment?:string;\n\treference?:string;\n\terror?:string;\n}\n\nexport interface URIOptions {\n\tscheme?:string;\n\treference?:string;\n\ttolerant?:boolean;\n\tabsolutePath?:boolean;\n\tiri?:boolean;\n\tunicodeSupport?:boolean;\n\tdomainHost?:boolean;\n}\n\nexport interface URISchemeHandler<Components extends URIComponents = URIComponents, Options extends URIOptions = URIOptions, ParentComponents extends URIComponents = URIComponents> {\n\tscheme:string;\n\tparse(components:ParentComponents, options:Options):Components;\n\tserialize(components:Components, options:Options):ParentComponents;\n\tunicodeSupport?:boolean;\n\tdomainHost?:boolean;\n\tabsolutePath?:boolean;\n}\n\nexport interface URIRegExps {\n\tNOT_SCHEME : RegExp,\n\tNOT_USERINFO : RegExp,\n\tNOT_HOST : RegExp,\n\tNOT_PATH : RegExp,\n\tNOT_PATH_NOSCHEME : RegExp,\n\tNOT_QUERY : RegExp,\n\tNOT_FRAGMENT : RegExp,\n\tESCAPE : RegExp,\n\tUNRESERVED : RegExp,\n\tOTHER_CHARS : RegExp,\n\tPCT_ENCODED : RegExp,\n\tIPV4ADDRESS : RegExp,\n\tIPV6ADDRESS : RegExp,\n}\n\nexport const SCHEMES:{[scheme:string]:URISchemeHandler} = {};\n\nexport function pctEncChar(chr:string):string {\n\tconst c = chr.charCodeAt(0);\n\tlet e:string;\n\n\tif (c < 16) e = \"%0\" + c.toString(16).toUpperCase();\n\telse if (c < 128) e = \"%\" + c.toString(16).toUpperCase();\n\telse if (c < 2048) e = \"%\" + ((c >> 6) | 192).toString(16).toUpperCase() + \"%\" + ((c & 63) | 128).toString(16).toUpperCase();\n\telse e = \"%\" + ((c >> 12) | 224).toString(16).toUpperCase() + \"%\" + (((c >> 6) & 63) | 128).toString(16).toUpperCase() + \"%\" + ((c & 63) | 128).toString(16).toUpperCase();\n\n\treturn e;\n}\n\nexport function pctDecChars(str:string):string {\n\tlet newStr = \"\";\n\tlet i = 0;\n\tconst il = str.length;\n\n\twhile (i < il) {\n\t\tconst c = parseInt(str.substr(i + 1, 2), 16);\n\n\t\tif (c < 128) {\n\t\t\tnewStr += String.fromCharCode(c);\n\t\t\ti += 3;\n\t\t}\n\t\telse if (c >= 194 && c < 224) {\n\t\t\tif ((il - i) >= 6) {\n\t\t\t\tconst c2 = parseInt(str.substr(i + 4, 2), 16);\n\t\t\t\tnewStr += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n\t\t\t} else {\n\t\t\t\tnewStr += str.substr(i, 6);\n\t\t\t}\n\t\t\ti += 6;\n\t\t}\n\t\telse if (c >= 224) {\n\t\t\tif ((il - i) >= 9) {\n\t\t\t\tconst c2 = parseInt(str.substr(i + 4, 2), 16);\n\t\t\t\tconst c3 = parseInt(str.substr(i + 7, 2), 16);\n\t\t\t\tnewStr += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\t\t\t} else {\n\t\t\t\tnewStr += str.substr(i, 9);\n\t\t\t}\n\t\t\ti += 9;\n\t\t}\n\t\telse {\n\t\t\tnewStr += str.substr(i, 3);\n\t\t\ti += 3;\n\t\t}\n\t}\n\n\treturn newStr;\n}\n\nfunction _normalizeComponentEncoding(components:URIComponents, protocol:URIRegExps) {\n\tfunction decodeUnreserved(str:string):string {\n\t\tconst decStr = pctDecChars(str);\n\t\treturn (!decStr.match(protocol.UNRESERVED) ? str : decStr);\n\t}\n\n\tif (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, \"\");\n\tif (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace((components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME), pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\n\treturn components;\n};\n\nfunction _stripLeadingZeros(str:string):string {\n\treturn str.replace(/^0*(.*)/, \"$1\") || \"0\";\n}\n\nfunction _normalizeIPv4(host:string, protocol:URIRegExps):string {\n\tconst matches = host.match(protocol.IPV4ADDRESS) || [];\n\tconst [, address] = matches;\n\t\n\tif (address) {\n\t\treturn address.split(\".\").map(_stripLeadingZeros).join(\".\");\n\t} else {\n\t\treturn host;\n\t}\n}\n\nfunction _normalizeIPv6(host:string, protocol:URIRegExps):string {\n\tconst matches = host.match(protocol.IPV6ADDRESS) || [];\n\tconst [, address, zone] = matches;\n\n\tif (address) {\n\t\tconst [last, first] = address.toLowerCase().split('::').reverse();\n\t\tconst firstFields = first ? first.split(\":\").map(_stripLeadingZeros) : [];\n\t\tconst lastFields = last.split(\":\").map(_stripLeadingZeros);\n\t\tconst isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);\n\t\tconst fieldCount = isLastFieldIPv4Address ? 7 : 8;\n\t\tconst lastFieldsStart = lastFields.length - fieldCount;\n\t\tconst fields = Array<string>(fieldCount);\n\n\t\tfor (let x = 0; x < fieldCount; ++x) {\n\t\t\tfields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';\n\t\t}\n\n\t\tif (isLastFieldIPv4Address) {\n\t\t\tfields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);\n\t\t}\n\n\t\tconst allZeroFields = fields.reduce<Array<{index:number,length:number}>>((acc, field, index) => {\n\t\t\tif (!field || field === \"0\") {\n\t\t\t\tconst lastLongest = acc[acc.length - 1];\n\t\t\t\tif (lastLongest && lastLongest.index + lastLongest.length === index) {\n\t\t\t\t\tlastLongest.length++;\n\t\t\t\t} else {\n\t\t\t\t\tacc.push({ index, length : 1 });\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, []);\n\n\t\tconst longestZeroFields = allZeroFields.sort((a, b) => b.length - a.length)[0];\n\n\t\tlet newHost:string;\n\t\tif (longestZeroFields && longestZeroFields.length > 1) {\n\t\t\tconst newFirst = fields.slice(0, longestZeroFields.index) ;\n\t\t\tconst newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);\n\t\t\tnewHost = newFirst.join(\":\") + \"::\" + newLast.join(\":\");\n\t\t} else {\n\t\t\tnewHost = fields.join(\":\");\n\t\t}\n\n\t\tif (zone) {\n\t\t\tnewHost += \"%\" + zone;\n\t\t}\n\n\t\treturn newHost;\n\t} else {\n\t\treturn host;\n\t}\n}\n\nconst URI_PARSE = /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:([^\\/?#@]*)@)?(\\[[^\\/?#\\]]+\\]|[^\\/?#:]*)(?:\\:(\\d*))?))?([^?#]*)(?:\\?([^#]*))?(?:#((?:.|\\n|\\r)*))?/i;\nconst NO_MATCH_IS_UNDEFINED = (<RegExpMatchArray>(\"\").match(/(){0}/))[1] === undefined;\n\nexport function parse(uriString:string, options:URIOptions = {}):URIComponents {\n\tconst components:URIComponents = {};\n\tconst protocol = (options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL);\n\n\tif (options.reference === \"suffix\") uriString = (options.scheme ? options.scheme + \":\" : \"\") + \"//\" + uriString;\n\n\tconst matches = uriString.match(URI_PARSE);\n\n\tif (matches) {\n\t\tif (NO_MATCH_IS_UNDEFINED) {\n\t\t\t//store each component\n\t\t\tcomponents.scheme = matches[1];\n\t\t\tcomponents.userinfo = matches[3];\n\t\t\tcomponents.host = matches[4];\n\t\t\tcomponents.port = parseInt(matches[5], 10);\n\t\t\tcomponents.path = matches[6] || \"\";\n\t\t\tcomponents.query = matches[7];\n\t\t\tcomponents.fragment = matches[8];\n\n\t\t\t//fix port number\n\t\t\tif (isNaN(components.port)) {\n\t\t\t\tcomponents.port = matches[5];\n\t\t\t}\n\t\t} else {  //IE FIX for improper RegExp matching\n\t\t\t//store each component\n\t\t\tcomponents.scheme = matches[1] || undefined;\n\t\t\tcomponents.userinfo = (uriString.indexOf(\"@\") !== -1 ? matches[3] : undefined);\n\t\t\tcomponents.host = (uriString.indexOf(\"//\") !== -1 ? matches[4] : undefined);\n\t\t\tcomponents.port = parseInt(matches[5], 10);\n\t\t\tcomponents.path = matches[6] || \"\";\n\t\t\tcomponents.query = (uriString.indexOf(\"?\") !== -1 ? matches[7] : undefined);\n\t\t\tcomponents.fragment = (uriString.indexOf(\"#\") !== -1 ? matches[8] : undefined);\n\n\t\t\t//fix port number\n\t\t\tif (isNaN(components.port)) {\n\t\t\t\tcomponents.port = (uriString.match(/\\/\\/(?:.|\\n)*\\:(?:\\/|\\?|\\#|$)/) ? matches[4] : undefined);\n\t\t\t}\n\t\t}\n\n\t\tif (components.host) {\n\t\t\t//normalize IP hosts\n\t\t\tcomponents.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);\n\t\t}\n\n\t\t//determine reference type\n\t\tif (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {\n\t\t\tcomponents.reference = \"same-document\";\n\t\t} else if (components.scheme === undefined) {\n\t\t\tcomponents.reference = \"relative\";\n\t\t} else if (components.fragment === undefined) {\n\t\t\tcomponents.reference = \"absolute\";\n\t\t} else {\n\t\t\tcomponents.reference = \"uri\";\n\t\t}\n\n\t\t//check for reference errors\n\t\tif (options.reference && options.reference !== \"suffix\" && options.reference !== components.reference) {\n\t\t\tcomponents.error = components.error || \"URI is not a \" + options.reference + \" reference.\";\n\t\t}\n\n\t\t//find scheme handler\n\t\tconst schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n\n\t\t//check if scheme can't handle IRIs\n\t\tif (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n\t\t\t//if host component is a domain name\n\t\t\tif (components.host && (options.domainHost || (schemeHandler && schemeHandler.domainHost))) {\n\t\t\t\t//convert Unicode IDN -> ASCII IDN\n\t\t\t\ttry {\n\t\t\t\t\tcomponents.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcomponents.error = components.error || \"Host's domain name can not be converted to ASCII via punycode: \" + e;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//convert IRI -> URI\n\t\t\t_normalizeComponentEncoding(components, URI_PROTOCOL);\n\t\t} else {\n\t\t\t//normalize encodings\n\t\t\t_normalizeComponentEncoding(components, protocol);\n\t\t}\n\n\t\t//perform scheme specific parsing\n\t\tif (schemeHandler && schemeHandler.parse) {\n\t\t\tschemeHandler.parse(components, options);\n\t\t}\n\t} else {\n\t\tcomponents.error = components.error || \"URI can not be parsed.\";\n\t}\n\n\treturn components;\n};\n\nfunction _recomposeAuthority(components:URIComponents, options:URIOptions):string|undefined {\n\tconst protocol = (options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL);\n\tconst uriTokens:Array<string> = [];\n\n\tif (components.userinfo !== undefined) {\n\t\turiTokens.push(components.userinfo);\n\t\turiTokens.push(\"@\");\n\t}\n\n\tif (components.host !== undefined) {\n\t\t//normalize IP hosts, add brackets and escape zone separator for IPv6\n\t\turiTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, (_, $1, $2) => \"[\" + $1 + ($2 ? \"%25\" + $2 : \"\") + \"]\"));\n\t}\n\n\tif (typeof components.port === \"number\" || typeof components.port === \"string\") {\n\t\turiTokens.push(\":\");\n\t\turiTokens.push(String(components.port));\n\t}\n\n\treturn uriTokens.length ? uriTokens.join(\"\") : undefined;\n};\n\nconst RDS1 = /^\\.\\.?\\//;\nconst RDS2 = /^\\/\\.(\\/|$)/;\nconst RDS3 = /^\\/\\.\\.(\\/|$)/;\nconst RDS4 = /^\\.\\.?$/;\nconst RDS5 = /^\\/?(?:.|\\n)*?(?=\\/|$)/;\n\nexport function removeDotSegments(input:string):string {\n\tconst output:Array<string> = [];\n\n\twhile (input.length) {\n\t\tif (input.match(RDS1)) {\n\t\t\tinput = input.replace(RDS1, \"\");\n\t\t} else if (input.match(RDS2)) {\n\t\t\tinput = input.replace(RDS2, \"/\");\n\t\t} else if (input.match(RDS3)) {\n\t\t\tinput = input.replace(RDS3, \"/\");\n\t\t\toutput.pop();\n\t\t} else if (input === \".\" || input === \"..\") {\n\t\t\tinput = \"\";\n\t\t} else {\n\t\t\tconst im = input.match(RDS5);\n\t\t\tif (im) {\n\t\t\t\tconst s = im[0];\n\t\t\t\tinput = input.slice(s.length);\n\t\t\t\toutput.push(s);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unexpected dot segment condition\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn output.join(\"\");\n};\n\nexport function serialize(components:URIComponents, options:URIOptions = {}):string {\n\tconst protocol = (options.iri ? IRI_PROTOCOL : URI_PROTOCOL);\n\tconst uriTokens:Array<string> = [];\n\n\t//find scheme handler\n\tconst schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n\n\t//perform scheme specific serialization\n\tif (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);\n\n\tif (components.host) {\n\t\t//if host component is an IPv6 address\n\t\tif (protocol.IPV6ADDRESS.test(components.host)) {\n\t\t\t//TODO: normalize IPv6 address as per RFC 5952\n\t\t}\n\n\t\t//if host component is a domain name\n\t\telse if (options.domainHost || (schemeHandler && schemeHandler.domainHost)) {\n\t\t\t//convert IDN via punycode\n\t\t\ttry {\n\t\t\t\tcomponents.host = (!options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host));\n\t\t\t} catch (e) {\n\t\t\t\tcomponents.error = components.error || \"Host's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n\t\t\t}\n\t\t}\n\t}\n\n\t//normalize encoding\n\t_normalizeComponentEncoding(components, protocol);\n\n\tif (options.reference !== \"suffix\" && components.scheme) {\n\t\turiTokens.push(components.scheme);\n\t\turiTokens.push(\":\");\n\t}\n\n\tconst authority = _recomposeAuthority(components, options);\n\tif (authority !== undefined) {\n\t\tif (options.reference !== \"suffix\") {\n\t\t\turiTokens.push(\"//\");\n\t\t}\n\n\t\turiTokens.push(authority);\n\n\t\tif (components.path && components.path.charAt(0) !== \"/\") {\n\t\t\turiTokens.push(\"/\");\n\t\t}\n\t}\n\n\tif (components.path !== undefined) {\n\t\tlet s = components.path;\n\n\t\tif (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n\t\t\ts = removeDotSegments(s);\n\t\t}\n\n\t\tif (authority === undefined) {\n\t\t\ts = s.replace(/^\\/\\//, \"/%2F\");  //don't allow the path to start with \"//\"\n\t\t}\n\n\t\turiTokens.push(s);\n\t}\n\n\tif (components.query !== undefined) {\n\t\turiTokens.push(\"?\");\n\t\turiTokens.push(components.query);\n\t}\n\n\tif (components.fragment !== undefined) {\n\t\turiTokens.push(\"#\");\n\t\turiTokens.push(components.fragment);\n\t}\n\n\treturn uriTokens.join(\"\");  //merge tokens into a string\n};\n\nexport function resolveComponents(base:URIComponents, relative:URIComponents, options:URIOptions = {}, skipNormalization?:boolean):URIComponents {\n\tconst target:URIComponents = {};\n\n\tif (!skipNormalization) {\n\t\tbase = parse(serialize(base, options), options);  //normalize base components\n\t\trelative = parse(serialize(relative, options), options);  //normalize relative components\n\t}\n\toptions = options || {};\n\n\tif (!options.tolerant && relative.scheme) {\n\t\ttarget.scheme = relative.scheme;\n\t\t//target.authority = relative.authority;\n\t\ttarget.userinfo = relative.userinfo;\n\t\ttarget.host = relative.host;\n\t\ttarget.port = relative.port;\n\t\ttarget.path = removeDotSegments(relative.path || \"\");\n\t\ttarget.query = relative.query;\n\t} else {\n\t\tif (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n\t\t\t//target.authority = relative.authority;\n\t\t\ttarget.userinfo = relative.userinfo;\n\t\t\ttarget.host = relative.host;\n\t\t\ttarget.port = relative.port;\n\t\t\ttarget.path = removeDotSegments(relative.path || \"\");\n\t\t\ttarget.query = relative.query;\n\t\t} else {\n\t\t\tif (!relative.path) {\n\t\t\t\ttarget.path = base.path;\n\t\t\t\tif (relative.query !== undefined) {\n\t\t\t\t\ttarget.query = relative.query;\n\t\t\t\t} else {\n\t\t\t\t\ttarget.query = base.query;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (relative.path.charAt(0) === \"/\") {\n\t\t\t\t\ttarget.path = removeDotSegments(relative.path);\n\t\t\t\t} else {\n\t\t\t\t\tif ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n\t\t\t\t\t\ttarget.path = \"/\" + relative.path;\n\t\t\t\t\t} else if (!base.path) {\n\t\t\t\t\t\ttarget.path = relative.path;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget.path = base.path.slice(0, base.path.lastIndexOf(\"/\") + 1) + relative.path;\n\t\t\t\t\t}\n\t\t\t\t\ttarget.path = removeDotSegments(target.path);\n\t\t\t\t}\n\t\t\t\ttarget.query = relative.query;\n\t\t\t}\n\t\t\t//target.authority = base.authority;\n\t\t\ttarget.userinfo = base.userinfo;\n\t\t\ttarget.host = base.host;\n\t\t\ttarget.port = base.port;\n\t\t}\n\t\ttarget.scheme = base.scheme;\n\t}\n\n\ttarget.fragment = relative.fragment;\n\n\treturn target;\n};\n\nexport function resolve(baseURI:string, relativeURI:string, options?:URIOptions):string {\n\tconst schemelessOptions = assign({ scheme : 'null' }, options);\n\treturn serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);\n};\n\nexport function normalize(uri:string, options?:URIOptions):string;\nexport function normalize(uri:URIComponents, options?:URIOptions):URIComponents;\nexport function normalize(uri:any, options?:URIOptions):any {\n\tif (typeof uri === \"string\") {\n\t\turi = serialize(parse(uri, options), options);\n\t} else if (typeOf(uri) === \"object\") {\n\t\turi = parse(serialize(<URIComponents>uri, options), options);\n\t}\n\n\treturn uri;\n};\n\nexport function equal(uriA:string, uriB:string, options?: URIOptions):boolean;\nexport function equal(uriA:URIComponents, uriB:URIComponents, options?:URIOptions):boolean;\nexport function equal(uriA:any, uriB:any, options?:URIOptions):boolean {\n\tif (typeof uriA === \"string\") {\n\t\turiA = serialize(parse(uriA, options), options);\n\t} else if (typeOf(uriA) === \"object\") {\n\t\turiA = serialize(<URIComponents>uriA, options);\n\t}\n\n\tif (typeof uriB === \"string\") {\n\t\turiB = serialize(parse(uriB, options), options);\n\t} else if (typeOf(uriB) === \"object\") {\n\t\turiB = serialize(<URIComponents>uriB, options);\n\t}\n\n\treturn uriA === uriB;\n};\n\nexport function escapeComponent(str:string, options?:URIOptions):string {\n\treturn str && str.toString().replace((!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE), pctEncChar);\n};\n\nexport function unescapeComponent(str:string, options?:URIOptions):string {\n\treturn str && str.toString().replace((!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED), pctDecChars);\n};\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tconst parts = string.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tconst labels = string.split('.');\n\tconst encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = array => String.fromCodePoint(...array);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tlet oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tlet inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tlet basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue == n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nmodule.exports = punycode;\n","import { URIRegExps } from \"./uri\";\nimport { buildExps } from \"./regexps-uri\";\n\nexport default buildExps(true);\n","import { URIRegExps } from \"./uri\";\nimport { merge, subexp } from \"./util\";\n\nexport function buildExps(isIRI:boolean):URIRegExps {\n\tconst\n\t\tALPHA$$ = \"[A-Za-z]\",\n\t\tCR$ = \"[\\\\x0D]\",\n\t\tDIGIT$$ = \"[0-9]\",\n\t\tDQUOTE$$ = \"[\\\\x22]\",\n\t\tHEXDIG$$ = merge(DIGIT$$, \"[A-Fa-f]\"),  //case-insensitive\n\t\tLF$$ = \"[\\\\x0A]\",\n\t\tSP$$ = \"[\\\\x20]\",\n\t\tPCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)),  //expanded\n\t\tGEN_DELIMS$$ = \"[\\\\:\\\\/\\\\?\\\\#\\\\[\\\\]\\\\@]\",\n\t\tSUB_DELIMS$$ = \"[\\\\!\\\\$\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\=]\",\n\t\tRESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),\n\t\tUCSCHAR$$ = isIRI ? \"[\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\" : \"[]\",  //subset, excludes bidi control characters\n\t\tIPRIVATE$$ = isIRI ? \"[\\\\uE000-\\\\uF8FF]\" : \"[]\",  //subset\n\t\tUNRESERVED$$ = merge(ALPHA$$, DIGIT$$, \"[\\\\-\\\\.\\\\_\\\\~]\", UCSCHAR$$),\n\t\tSCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\") + \"*\"),\n\t\tUSERINFO$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\")) + \"*\"),\n\t\tDEC_OCTET$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"[1-9]\" + DIGIT$$) + \"|\" + DIGIT$$),\n\t\tDEC_OCTET_RELAXED$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"0?[1-9]\" + DIGIT$$) + \"|0?0?\" + DIGIT$$),  //relaxed parsing rules\n\t\tIPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$),\n\t\tH16$ = subexp(HEXDIG$$ + \"{1,4}\"),\n\t\tLS32$ = subexp(subexp(H16$ + \"\\\\:\" + H16$) + \"|\" + IPV4ADDRESS$),\n\t\tIPV6ADDRESS1$ = subexp(                                                            subexp(H16$ + \"\\\\:\") + \"{6}\" + LS32$), //                           6( h16 \":\" ) ls32\n\t\tIPV6ADDRESS2$ = subexp(                                                 \"\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{5}\" + LS32$), //                      \"::\" 5( h16 \":\" ) ls32\n\t\tIPV6ADDRESS3$ = subexp(subexp(                                 H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{4}\" + LS32$), //[               h16 ] \"::\" 4( h16 \":\" ) ls32\n\t\tIPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,1}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{3}\" + LS32$), //[ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n\t\tIPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,2}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{2}\" + LS32$), //[ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n\t\tIPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,3}\" + H16$) + \"?\\\\:\\\\:\" +        H16$ + \"\\\\:\"          + LS32$), //[ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n\t\tIPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,4}\" + H16$) + \"?\\\\:\\\\:\"                                + LS32$), //[ *4( h16 \":\" ) h16 ] \"::\"              ls32\n\t\tIPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,5}\" + H16$) + \"?\\\\:\\\\:\"                                + H16$ ), //[ *5( h16 \":\" ) h16 ] \"::\"              h16\n\t\tIPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,6}\" + H16$) + \"?\\\\:\\\\:\"                                       ), //[ *6( h16 \":\" ) h16 ] \"::\"\n\t\tIPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join(\"|\")),\n\t\tZONEID$ = subexp(subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$) + \"+\"),  //RFC 6874\n\t\tIPV6ADDRZ$ = subexp(IPV6ADDRESS$ + \"\\\\%25\" + ZONEID$),  //RFC 6874\n\t\tIPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + ZONEID$),  //RFC 6874, with relaxed parsing rules\n\t\tIPVFUTURE$ = subexp(\"[vV]\" + HEXDIG$$ + \"+\\\\.\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\") + \"+\"),\n\t\tIP_LITERAL$ = subexp(\"\\\\[\" + subexp(IPV6ADDRZ_RELAXED$ + \"|\" + IPV6ADDRESS$ + \"|\" + IPVFUTURE$) + \"\\\\]\"),  //RFC 6874\n\t\tREG_NAME$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$)) + \"*\"),\n\t\tHOST$ = subexp(IP_LITERAL$ + \"|\" + IPV4ADDRESS$ + \"(?!\" + REG_NAME$ + \")\" + \"|\" + REG_NAME$),\n\t\tPORT$ = subexp(DIGIT$$ + \"*\"),\n\t\tAUTHORITY$ = subexp(subexp(USERINFO$ + \"@\") + \"?\" + HOST$ + subexp(\"\\\\:\" + PORT$) + \"?\"),\n\t\tPCHAR$ = subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@]\")),\n\t\tSEGMENT$ = subexp(PCHAR$ + \"*\"),\n\t\tSEGMENT_NZ$ = subexp(PCHAR$ + \"+\"),\n\t\tSEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\@]\")) + \"+\"),\n\t\tPATH_ABEMPTY$ = subexp(subexp(\"\\\\/\" + SEGMENT$) + \"*\"),\n\t\tPATH_ABSOLUTE$ = subexp(\"\\\\/\" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + \"?\"),  //simplified\n\t\tPATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),  //simplified\n\t\tPATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),  //simplified\n\t\tPATH_EMPTY$ = \"(?!\" + PCHAR$ + \")\",\n\t\tPATH$ = subexp(PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n\t\tQUERY$ = subexp(subexp(PCHAR$ + \"|\" + merge(\"[\\\\/\\\\?]\", IPRIVATE$$)) + \"*\"),\n\t\tFRAGMENT$ = subexp(subexp(PCHAR$ + \"|[\\\\/\\\\?]\") + \"*\"),\n\t\tHIER_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n\t\tURI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n\t\tRELATIVE_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$),\n\t\tRELATIVE$ = subexp(RELATIVE_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n\t\tURI_REFERENCE$ = subexp(URI$ + \"|\" + RELATIVE$),\n\t\tABSOLUTE_URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\"),\n\n\t\tGENERIC_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tRELATIVE_REF$ = \"^(){0}\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tABSOLUTE_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?$\",\n\t\tSAMEDOC_REF$ = \"^\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tAUTHORITY_REF$ = \"^\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?$\"\n\t;\n\n\treturn {\n\t\tNOT_SCHEME : new RegExp(merge(\"[^]\", ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\"), \"g\"),\n\t\tNOT_USERINFO : new RegExp(merge(\"[^\\\\%\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_HOST : new RegExp(merge(\"[^\\\\%\\\\[\\\\]\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_PATH : new RegExp(merge(\"[^\\\\%\\\\/\\\\:\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_PATH_NOSCHEME : new RegExp(merge(\"[^\\\\%\\\\/\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_QUERY : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\", IPRIVATE$$), \"g\"),\n\t\tNOT_FRAGMENT : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\"), \"g\"),\n\t\tESCAPE : new RegExp(merge(\"[^]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tUNRESERVED : new RegExp(UNRESERVED$$, \"g\"),\n\t\tOTHER_CHARS : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, RESERVED$$), \"g\"),\n\t\tPCT_ENCODED : new RegExp(PCT_ENCODED$, \"g\"),\n\t\tIPV4ADDRESS : new RegExp(\"^(\" + IPV4ADDRESS$ + \")$\"),\n\t\tIPV6ADDRESS : new RegExp(\"^\\\\[?(\" + IPV6ADDRESS$ + \")\" + subexp(subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + \"(\" + ZONEID$ + \")\") + \"?\\\\]?$\")  //RFC 6874, with relaxed parsing rules\n\t};\n}\n\nexport default buildExps(false);\n","export function merge(...sets:Array<string>):string {\n\tif (sets.length > 1) {\n\t\tsets[0] = sets[0].slice(0, -1);\n\t\tconst xl = sets.length - 1;\n\t\tfor (let x = 1; x < xl; ++x) {\n\t\t\tsets[x] = sets[x].slice(1, -1);\n\t\t}\n\t\tsets[xl] = sets[xl].slice(1);\n\t\treturn sets.join('');\n\t} else {\n\t\treturn sets[0];\n\t}\n}\n\nexport function subexp(str:string):string {\n\treturn \"(?:\" + str + \")\";\n}\n\nexport function typeOf(o:any):string {\n\treturn o === undefined ? \"undefined\" : (o === null ? \"null\" : Object.prototype.toString.call(o).split(\" \").pop().split(\"]\").shift().toLowerCase());\n}\n\nexport function toUpperCase(str:string):string {\n\treturn str.toUpperCase();\n}\n\nexport function toArray(obj:any):Array<any> {\n\treturn obj !== undefined && obj !== null ? (obj instanceof Array ? obj : (typeof obj.length !== \"number\" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj))) : [];\n}\n\n\nexport function assign(target: object, source: any): any {\n\tconst obj = target as any;\n\tif (source) {\n\t\tfor (const key in source) {\n\t\t\tobj[key] = source[key];\n\t\t}\n\t}\n\treturn obj;\n}"],"names":["SCHEMES","uuid","scheme","urn","mailto","wss","ws","https","http","urnComponents","nss","uuidComponents","toLowerCase","serialize","options","error","tolerant","match","UUID","undefined","parse","handler","uriComponents","path","nid","schemeHandler","urnScheme","matches","components","URN_PARSE","query","fields","join","length","push","name","replace","PCT_ENCODED","decodeUnreserved","toUpperCase","NOT_HFNAME","pctEncChar","headers","NOT_HFVALUE","O","mailtoComponents","body","subject","to","x","localPart","domain","iri","e","punycode","toASCII","unescapeComponent","toUnicode","toAddr","slice","atIdx","NOT_LOCAL_PART","lastIndexOf","String","xl","toArray","addr","unicodeSupport","split","unknownHeaders","hfield","toAddrs","hfields","decStr","UNRESERVED","str","pctDecChars","RegExp","merge","UNRESERVED$$","SOME_DELIMS$$","NOT_DOMAIN","ATEXT$$","DTEXT_NO_OBS$$","VCHAR$$","PCT_ENCODED$","QTEXT$$","subexp","HEXDIG$$","domainHost","wsComponents","fragment","resourceName","secure","port","isSecure","host","toString","URI_PROTOCOL","IRI_PROTOCOL","ESCAPE","escapeComponent","uriA","uriB","typeOf","equal","uri","normalize","resolveComponents","baseURI","schemelessOptions","relativeURI","assign","resolve","target","relative","base","userinfo","removeDotSegments","charAt","skipNormalization","uriTokens","s","authority","absolutePath","reference","_recomposeAuthority","_normalizeComponentEncoding","protocol","IPV6ADDRESS","test","output","Error","input","im","RDS5","pop","RDS3","RDS2","RDS1","$1","$2","_normalizeIPv6","_normalizeIPv4","_","uriString","isNaN","indexOf","parseInt","NO_MATCH_IS_UNDEFINED","URI_PARSE","newHost","zone","newFirst","newLast","longestZeroFields","index","b","a","allZeroFields","sort","acc","lastLongest","field","reduce","fieldCount","isLastFieldIPv4Address","firstFields","lastFields","lastFieldsStart","Array","IPV4ADDRESS","last","map","_stripLeadingZeros","first","address","reverse","NOT_FRAGMENT","NOT_QUERY","NOT_PATH","NOT_PATH_NOSCHEME","NOT_HOST","NOT_USERINFO","NOT_SCHEME","newStr","i","substr","fromCharCode","c","c2","c3","il","chr","charCodeAt","encode","decode","ucs2encode","ucs2decode","regexNonASCII","string","mapDomain","regexPunycode","n","delta","handledCPCount","bias","adapt","handledCPCountPlusOne","basicLength","stringFromCharCode","digitToBasic","q","floor","qMinusT","baseMinusT","t","k","tMin","tMax","currentValue","maxInt","m","inputLength","delimiter","initialBias","initialN","fromCodePoint","splice","out","oldi","w","digit","basicToDigit","basic","j","baseMinusTMin","skew","numPoints","firstTime","damp","flag","codePoint","array","value","counter","extra","result","encoded","labels","fn","regexSeparators","parts","RangeError","errors","type","Math","buildExps","IPV6ADDRESS$","ZONEID$","IPV4ADDRESS$","OTHER_CHARS","RESERVED$$","SUB_DELIMS$$","IPRIVATE$$","ALPHA$$","DIGIT$$","QUERY$","PCHAR$","SEGMENT_NZ_NC$","REG_NAME$","IPVFUTURE$","IPV6ADDRESS1$","IPV6ADDRESS2$","IPV6ADDRESS3$","IPV6ADDRESS4$","IPV6ADDRESS5$","IPV6ADDRESS6$","IPV6ADDRESS7$","IPV6ADDRESS8$","IPV6ADDRESS9$","H16$","LS32$","DEC_OCTET_RELAXED$","USERINFO$","SCHEME$","UCSCHAR$$","isIRI","GEN_DELIMS$$","obj","key","source","setInterval","call","prototype","o","Object","shift","sets"],"mappings":"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"}