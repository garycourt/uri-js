{"version":3,"file":"uri.all.js","sources":["../../src/index.ts","../../src/schemes/urn-uuid.ts","../../src/schemes/urn.ts","../../src/schemes/mailto.ts","../../src/schemes/wss.ts","../../src/schemes/ws.ts","../../src/schemes/https.ts","../../src/schemes/http.ts","../../src/uri.ts","../../node_modules/punycode/punycode.js","../../src/regexps-uri.ts","../../src/util.ts"],"sourcesContent":["import { SCHEMES } from \"./uri\";\n\nimport http from \"./schemes/http\";\nSCHEMES[http.scheme] = http;\n\nimport https from \"./schemes/https\";\nSCHEMES[https.scheme] = https;\n\nimport ws from \"./schemes/ws\";\nSCHEMES[ws.scheme] = ws;\n\nimport wss from \"./schemes/wss\";\nSCHEMES[wss.scheme] = wss;\n\nimport mailto from \"./schemes/mailto\";\nSCHEMES[mailto.scheme] = mailto;\n\nimport urn from \"./schemes/urn\";\nSCHEMES[urn.scheme] = urn;\n\nimport uuid from \"./schemes/urn-uuid\";\nSCHEMES[uuid.scheme] = uuid;\n\nexport * from \"./uri\";\n","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { URNComponents } from \"./urn\";\nimport { SCHEMES } from \"../uri\";\n\nexport interface UUIDComponents extends URNComponents {\n\tuuid?: string;\n}\n\nconst UUID = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/;\nconst UUID_PARSE = /^[0-9A-Fa-f\\-]{36}/;\n\n//RFC 4122\nconst handler:URISchemeHandler<UUIDComponents, URIOptions, URNComponents> = {\n\tscheme : \"urn:uuid\",\n\n\tparse : function (urnComponents:URNComponents, options:URIOptions):UUIDComponents {\n\t\tconst uuidComponents = urnComponents as UUIDComponents;\n\t\tuuidComponents.uuid = uuidComponents.nss;\n\t\tuuidComponents.nss = undefined;\n\n\t\tif (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {\n\t\t\tuuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\n\t\t}\n\n\t\treturn uuidComponents;\n\t},\n\n\tserialize : function (uuidComponents:UUIDComponents, options:URIOptions):URNComponents {\n\t\tconst urnComponents = uuidComponents as URNComponents;\n\t\t//normalize UUID\n\t\turnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\n\t\treturn urnComponents;\n\t},\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { pctEncChar, SCHEMES } from \"../uri\";\n\nexport interface URNComponents extends URIComponents {\n\tnid?:string;\n\tnss?:string;\n}\n\nexport interface URNOptions extends URIOptions {\n\tnid?:string;\n}\n\nconst NID$ = \"(?:[0-9A-Za-z][0-9A-Za-z\\\\-]{1,31})\";\nconst PCT_ENCODED$ = \"(?:\\\\%[0-9A-Fa-f]{2})\";\nconst TRANS$$ = \"[0-9A-Za-z\\\\(\\\\)\\\\+\\\\,\\\\-\\\\.\\\\:\\\\=\\\\@\\\\;\\\\$\\\\_\\\\!\\\\*\\\\'\\\\/\\\\?\\\\#]\";\nconst NSS$ = \"(?:(?:\" + PCT_ENCODED$ + \"|\" + TRANS$$ + \")+)\";\nconst URN_SCHEME = new RegExp(\"^urn\\\\:(\" + NID$ + \")$\");\nconst URN_PATH = new RegExp(\"^(\" + NID$ + \")\\\\:(\" + NSS$ + \")$\");\nconst URN_PARSE = /^([^\\:]+)\\:(.*)/;\nconst URN_EXCLUDED = /[\\x00-\\x20\\\\\\\"\\&\\<\\>\\[\\]\\^\\`\\{\\|\\}\\~\\x7F-\\xFF]/g;\n\n//RFC 2141\nconst handler:URISchemeHandler<URNComponents,URNOptions> = {\n\tscheme : \"urn\",\n\n\tparse : function (components:URIComponents, options:URNOptions):URNComponents {\n\t\tconst matches = components.path && components.path.match(URN_PARSE);\n\t\tlet urnComponents = components as URNComponents;\n\n\t\tif (matches) {\n\t\t\tconst scheme = options.scheme || urnComponents.scheme || \"urn\";\n\t\t\tconst nid = matches[1].toLowerCase();\n\t\t\tconst nss = matches[2];\n\t\t\tconst urnScheme = `${scheme}:${options.nid || nid}`;\n\t\t\tconst schemeHandler = SCHEMES[urnScheme];\n\n\t\t\turnComponents.nid = nid;\n\t\t\turnComponents.nss = nss;\n\t\t\turnComponents.path = undefined;\n\n\t\t\tif (schemeHandler) {\n\t\t\t\turnComponents = schemeHandler.parse(urnComponents, options) as URNComponents;\n\t\t\t}\n\t\t} else {\n\t\t\turnComponents.error = urnComponents.error || \"URN can not be parsed.\";\n\t\t}\n\n\t\treturn urnComponents;\n\t},\n\n\tserialize : function (urnComponents:URNComponents, options:URNOptions):URIComponents {\n\t\tconst scheme = options.scheme || urnComponents.scheme || \"urn\";\n\t\tconst nid = urnComponents.nid;\n\t\tconst urnScheme = `${scheme}:${options.nid || nid}`;\n\t\tconst schemeHandler = SCHEMES[urnScheme];\n\n\t\tif (schemeHandler) {\n\t\t\turnComponents = schemeHandler.serialize(urnComponents, options) as URNComponents;\n\t\t}\n\n\t\tconst uriComponents = urnComponents as URIComponents;\n\t\tconst nss = urnComponents.nss;\n\t\turiComponents.path = `${nid || options.nid}:${nss}`;\n\n\t\treturn uriComponents;\n\t},\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport { pctEncChar, pctDecChars, unescapeComponent } from \"../uri\";\nimport punycode from \"punycode\";\nimport { merge, subexp, toUpperCase, toArray } from \"../util\";\n\nexport interface MailtoHeaders {\n\t[hfname:string]:string\n}\n\nexport interface MailtoComponents extends URIComponents {\n\tto:Array<string>,\n\theaders?:MailtoHeaders,\n\tsubject?:string,\n\tbody?:string\n}\n\nconst O:MailtoHeaders = {};\nconst isIRI = true;\n\n//RFC 3986\nconst UNRESERVED$$ = \"[A-Za-z0-9\\\\-\\\\.\\\\_\\\\~\" + (isIRI ? \"\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF\" : \"\") + \"]\";\nconst HEXDIG$$ = \"[0-9A-Fa-f]\";  //case-insensitive\nconst PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$));  //expanded\n\n//RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =\n//const ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\#\\\\$\\\\%\\\\&\\\\'\\\\*\\\\+\\\\-\\\\/\\\\=\\\\?\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QTEXT$$ = \"[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F]\";  //(%d1-8 / %d11-12 / %d14-31 / %d127)\n//const QTEXT$$ = merge(\"[\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E]\", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext\n//const VCHAR$$ = \"[\\\\x21-\\\\x7E]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QP$ = subexp(\"\\\\\\\\\" + merge(\"[\\\\x00\\\\x0D\\\\x0A]\", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext\n//const FWS$ = subexp(subexp(WSP$$ + \"*\" + \"\\\\x0D\\\\x0A\") + \"?\" + WSP$$ + \"+\");\n//const QUOTED_PAIR$ = subexp(subexp(\"\\\\\\\\\" + subexp(VCHAR$$ + \"|\" + WSP$$)) + \"|\" + OBS_QP$);\n//const QUOTED_STRING$ = subexp('\\\\\"' + subexp(FWS$ + \"?\" + QCONTENT$) + \"*\" + FWS$ + \"?\" + '\\\\\"');\nconst ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\$\\\\%\\\\'\\\\*\\\\+\\\\-\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\nconst QTEXT$$ = \"[\\\\!\\\\$\\\\%\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.0-9\\\\<\\\\>A-Z\\\\x5E-\\\\x7E]\";\nconst VCHAR$$ = merge(QTEXT$$, \"[\\\\\\\"\\\\\\\\]\");\nconst DOT_ATOM_TEXT$ = subexp(ATEXT$$ + \"+\" + subexp(\"\\\\.\" + ATEXT$$ + \"+\") + \"*\");\nconst QUOTED_PAIR$ = subexp(\"\\\\\\\\\" + VCHAR$$);\nconst QCONTENT$ = subexp(QTEXT$$ + \"|\" + QUOTED_PAIR$);\nconst QUOTED_STRING$ = subexp('\\\\\"' + QCONTENT$ + \"*\" + '\\\\\"');\n\n//RFC 6068\nconst DTEXT_NO_OBS$$ = \"[\\\\x21-\\\\x5A\\\\x5E-\\\\x7E]\";  //%d33-90 / %d94-126\nconst SOME_DELIMS$$ = \"[\\\\!\\\\$\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\:\\\\@]\";\nconst QCHAR$ = subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$ + \"|\" + SOME_DELIMS$$);\nconst DOMAIN$ = subexp(DOT_ATOM_TEXT$ + \"|\" + \"\\\\[\" + DTEXT_NO_OBS$$ + \"*\" + \"\\\\]\");\nconst LOCAL_PART$ = subexp(DOT_ATOM_TEXT$ + \"|\" + QUOTED_STRING$);\nconst ADDR_SPEC$ = subexp(LOCAL_PART$ + \"\\\\@\" + DOMAIN$);\nconst TO$ = subexp(ADDR_SPEC$ + subexp(\"\\\\,\" + ADDR_SPEC$) + \"*\");\nconst HFNAME$ = subexp(QCHAR$ + \"*\");\nconst HFVALUE$ = HFNAME$;\nconst HFIELD$ = subexp(HFNAME$ + \"\\\\=\" + HFVALUE$);\nconst HFIELDS2$ = subexp(HFIELD$ + subexp(\"\\\\&\" + HFIELD$) + \"*\");\nconst HFIELDS$ = subexp(\"\\\\?\" + HFIELDS2$);\nconst MAILTO_URI = new RegExp(\"^mailto\\\\:\" + TO$ + \"?\" + HFIELDS$ + \"?$\");\n\nconst UNRESERVED = new RegExp(UNRESERVED$$, \"g\");\nconst PCT_ENCODED = new RegExp(PCT_ENCODED$, \"g\");\nconst NOT_LOCAL_PART = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", '[\\\\\"]', VCHAR$$), \"g\");\nconst NOT_DOMAIN = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", \"[\\\\[]\", DTEXT_NO_OBS$$, \"[\\\\]]\"), \"g\");\nconst NOT_HFNAME = new RegExp(merge(\"[^]\", UNRESERVED$$, SOME_DELIMS$$), \"g\");\nconst NOT_HFVALUE = NOT_HFNAME;\nconst TO = new RegExp(\"^\" + TO$ + \"$\");\nconst HFIELDS = new RegExp(\"^\" + HFIELDS2$ + \"$\");\n\nfunction decodeUnreserved(str:string):string {\n\tconst decStr = pctDecChars(str);\n\treturn (!decStr.match(UNRESERVED) ? str : decStr);\n}\n\nconst handler:URISchemeHandler<MailtoComponents> =  {\n\tscheme : \"mailto\",\n\n\tparse : function (components:URIComponents, options:URIOptions):MailtoComponents {\n\t\tconst mailtoComponents = components as MailtoComponents;\n\t\tconst to = mailtoComponents.to = (mailtoComponents.path ? mailtoComponents.path.split(\",\") : []);\n\t\tmailtoComponents.path = undefined;\n\n\t\tif (mailtoComponents.query) {\n\t\t\tlet unknownHeaders = false\n\t\t\tconst headers:MailtoHeaders = {};\n\t\t\tconst hfields = mailtoComponents.query.split(\"&\");\n\n\t\t\tfor (let x = 0, xl = hfields.length; x < xl; ++x) {\n\t\t\t\tconst hfield = hfields[x].split(\"=\");\n\n\t\t\t\tswitch (hfield[0]) {\n\t\t\t\t\tcase \"to\":\n\t\t\t\t\t\tconst toAddrs = hfield[1].split(\",\");\n\t\t\t\t\t\tfor (let x = 0, xl = toAddrs.length; x < xl; ++x) {\n\t\t\t\t\t\t\tto.push(toAddrs[x]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"subject\":\n\t\t\t\t\t\tmailtoComponents.subject = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"body\":\n\t\t\t\t\t\tmailtoComponents.body = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tunknownHeaders = true;\n\t\t\t\t\t\theaders[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (unknownHeaders) mailtoComponents.headers = headers;\n\t\t}\n\n\t\tmailtoComponents.query = undefined;\n\n\t\tfor (let x = 0, xl = to.length; x < xl; ++x) {\n\t\t\tconst addr = to[x].split(\"@\");\n\n\t\t\taddr[0] = unescapeComponent(addr[0]);\n\n\t\t\tif (!options.unicodeSupport) {\n\t\t\t\t//convert Unicode IDN -> ASCII IDN\n\t\t\t\ttry {\n\t\t\t\t\taddr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tmailtoComponents.error = mailtoComponents.error || \"Email address's domain name can not be converted to ASCII via punycode: \" + e;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\taddr[1] = unescapeComponent(addr[1], options).toLowerCase();\n\t\t\t}\n\n\t\t\tto[x] = addr.join(\"@\");\n\t\t}\n\n\t\treturn mailtoComponents;\n\t},\n\n\tserialize : function (mailtoComponents:MailtoComponents, options:URIOptions):URIComponents {\n\t\tconst components = mailtoComponents as URIComponents;\n\t\tconst to = toArray(mailtoComponents.to);\n\t\tif (to) {\n\t\t\tfor (let x = 0, xl = to.length; x < xl; ++x) {\n\t\t\t\tconst toAddr = String(to[x]);\n\t\t\t\tconst atIdx = toAddr.lastIndexOf(\"@\");\n\t\t\t\tconst localPart = (toAddr.slice(0, atIdx)).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);\n\t\t\t\tlet domain = toAddr.slice(atIdx + 1);\n\n\t\t\t\t//convert IDN via punycode\n\t\t\t\ttry {\n\t\t\t\t\tdomain = (!options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcomponents.error = components.error || \"Email address's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n\t\t\t\t}\n\n\t\t\t\tto[x] = localPart + \"@\" + domain;\n\t\t\t}\n\n\t\t\tcomponents.path = to.join(\",\");\n\t\t}\n\n\t\tconst headers = mailtoComponents.headers = mailtoComponents.headers || {};\n\n\t\tif (mailtoComponents.subject) headers[\"subject\"] = mailtoComponents.subject;\n\t\tif (mailtoComponents.body) headers[\"body\"] = mailtoComponents.body;\n\n\t\tconst fields = [];\n\t\tfor (const name in headers) {\n\t\t\tif (headers[name] !== O[name]) {\n\t\t\t\tfields.push(\n\t\t\t\t\tname.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) +\n\t\t\t\t\t\"=\" +\n\t\t\t\t\theaders[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (fields.length) {\n\t\t\tcomponents.query = fields.join(\"&\");\n\t\t}\n\n\t\treturn components;\n\t}\n}\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport ws from \"./ws\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"wss\",\n\tdomainHost : ws.domainHost,\n\tparse : ws.parse,\n\tserialize : ws.serialize\n}\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\n\nexport interface WSComponents extends URIComponents {\n\tresourceName?: string;\n\tsecure?: boolean;\n}\n\nfunction isSecure(wsComponents:WSComponents):boolean {\n\treturn typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === \"wss\";\n}\n\n//RFC 6455\nconst handler:URISchemeHandler = {\n\tscheme : \"ws\",\n\n\tdomainHost : true,\n\n\tparse : function (components:URIComponents, options:URIOptions):WSComponents {\n\t\tconst wsComponents = components as WSComponents;\n\n\t\t//indicate if the secure flag is set\n\t\twsComponents.secure = isSecure(wsComponents);\n\n\t\t//construct resouce name\n\t\twsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');\n\t\twsComponents.path = undefined;\n\t\twsComponents.query = undefined;\n\n\t\treturn wsComponents;\n\t},\n\n\tserialize : function (wsComponents:WSComponents, options:URIOptions):URIComponents {\n\t\t//normalize the default port\n\t\tif (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === \"\") {\n\t\t\twsComponents.port = undefined;\n\t\t}\n\n\t\t//ensure scheme matches secure flag\n\t\tif (typeof wsComponents.secure === 'boolean') {\n\t\t\twsComponents.scheme = (wsComponents.secure ? 'wss' : 'ws');\n\t\t\twsComponents.secure = undefined;\n\t\t}\n\n\t\t//reconstruct path from resource name\n\t\tif (wsComponents.resourceName) {\n\t\t\tconst [path, query] = wsComponents.resourceName.split('?');\n\t\t\twsComponents.path = (path && path !== '/' ? path : undefined);\n\t\t\twsComponents.query = query;\n\t\t\twsComponents.resourceName = undefined;\n\t\t}\n\n\t\t//forbid fragment component\n\t\twsComponents.fragment = undefined;\n\n\t\treturn wsComponents;\n\t}\n};\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\nimport http from \"./http\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"https\",\n\tdomainHost : http.domainHost,\n\tparse : http.parse,\n\tserialize : http.serialize\n}\n\nexport default handler;","import { URISchemeHandler, URIComponents, URIOptions } from \"../uri\";\n\nconst handler:URISchemeHandler = {\n\tscheme : \"http\",\n\n\tdomainHost : true,\n\n\tparse : function (components:URIComponents, options:URIOptions):URIComponents {\n\t\t//report missing host\n\t\tif (!components.host) {\n\t\t\tcomponents.error = components.error || \"HTTP URIs must have a host.\";\n\t\t}\n\n\t\treturn components;\n\t},\n\n\tserialize : function (components:URIComponents, options:URIOptions):URIComponents {\n\t\tconst secure = String(components.scheme).toLowerCase() === \"https\";\n\n\t\t//normalize the default port\n\t\tif (components.port === (secure ? 443 : 80) || components.port === \"\") {\n\t\t\tcomponents.port = undefined;\n\t\t}\n\t\t\n\t\t//normalize the empty path\n\t\tif (!components.path) {\n\t\t\tcomponents.path = \"/\";\n\t\t}\n\n\t\t//NOTE: We do not parse query strings for HTTP URIs\n\t\t//as WWW Form Url Encoded query strings are part of the HTML4+ spec,\n\t\t//and not the HTTP spec.\n\n\t\treturn components;\n\t}\n};\n\nexport default handler;","/**\n * URI.js\n *\n * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/uri-js\n */\n\n/**\n * Copyright 2011 Gary Court. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are\n * permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice, this list of\n *       conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above copyright notice, this list\n *       of conditions and the following disclaimer in the documentation and/or other materials\n *       provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation are those of the\n * authors and should not be interpreted as representing official policies, either expressed\n * or implied, of Gary Court.\n */\n\nimport URI_PROTOCOL from \"./regexps-uri\";\nimport IRI_PROTOCOL from \"./regexps-iri\";\nimport punycode from \"punycode\";\nimport { toUpperCase, typeOf, assign } from \"./util\";\n\nexport interface URIComponents {\n\tscheme?:string;\n\tuserinfo?:string;\n\thost?:string;\n\tport?:number|string;\n\tpath?:string;\n\tquery?:string;\n\tfragment?:string;\n\treference?:string;\n\terror?:string;\n}\n\nexport interface URIOptions {\n\tscheme?:string;\n\treference?:string;\n\ttolerant?:boolean;\n\tabsolutePath?:boolean;\n\tiri?:boolean;\n\tunicodeSupport?:boolean;\n\tdomainHost?:boolean;\n}\n\nexport interface URISchemeHandler<Components extends URIComponents = URIComponents, Options extends URIOptions = URIOptions, ParentComponents extends URIComponents = URIComponents> {\n\tscheme:string;\n\tparse(components:ParentComponents, options:Options):Components;\n\tserialize(components:Components, options:Options):ParentComponents;\n\tunicodeSupport?:boolean;\n\tdomainHost?:boolean;\n\tabsolutePath?:boolean;\n}\n\nexport interface URIRegExps {\n\tNOT_SCHEME : RegExp,\n\tNOT_USERINFO : RegExp,\n\tNOT_HOST : RegExp,\n\tNOT_PATH : RegExp,\n\tNOT_PATH_NOSCHEME : RegExp,\n\tNOT_QUERY : RegExp,\n\tNOT_FRAGMENT : RegExp,\n\tESCAPE : RegExp,\n\tUNRESERVED : RegExp,\n\tOTHER_CHARS : RegExp,\n\tPCT_ENCODED : RegExp,\n\tIPV4ADDRESS : RegExp,\n\tIPV6ADDRESS : RegExp,\n}\n\nexport const SCHEMES:{[scheme:string]:URISchemeHandler} = {};\n\nexport function pctEncChar(chr:string):string {\n\tconst c = chr.charCodeAt(0);\n\tlet e:string;\n\n\tif (c < 16) e = \"%0\" + c.toString(16).toUpperCase();\n\telse if (c < 128) e = \"%\" + c.toString(16).toUpperCase();\n\telse if (c < 2048) e = \"%\" + ((c >> 6) | 192).toString(16).toUpperCase() + \"%\" + ((c & 63) | 128).toString(16).toUpperCase();\n\telse e = \"%\" + ((c >> 12) | 224).toString(16).toUpperCase() + \"%\" + (((c >> 6) & 63) | 128).toString(16).toUpperCase() + \"%\" + ((c & 63) | 128).toString(16).toUpperCase();\n\n\treturn e;\n}\n\nexport function pctDecChars(str:string):string {\n\tlet newStr = \"\";\n\tlet i = 0;\n\tconst il = str.length;\n\n\twhile (i < il) {\n\t\tconst c = parseInt(str.substr(i + 1, 2), 16);\n\n\t\tif (c < 128) {\n\t\t\tnewStr += String.fromCharCode(c);\n\t\t\ti += 3;\n\t\t}\n\t\telse if (c >= 194 && c < 224) {\n\t\t\tif ((il - i) >= 6) {\n\t\t\t\tconst c2 = parseInt(str.substr(i + 4, 2), 16);\n\t\t\t\tnewStr += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n\t\t\t} else {\n\t\t\t\tnewStr += str.substr(i, 6);\n\t\t\t}\n\t\t\ti += 6;\n\t\t}\n\t\telse if (c >= 224) {\n\t\t\tif ((il - i) >= 9) {\n\t\t\t\tconst c2 = parseInt(str.substr(i + 4, 2), 16);\n\t\t\t\tconst c3 = parseInt(str.substr(i + 7, 2), 16);\n\t\t\t\tnewStr += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\t\t\t} else {\n\t\t\t\tnewStr += str.substr(i, 9);\n\t\t\t}\n\t\t\ti += 9;\n\t\t}\n\t\telse {\n\t\t\tnewStr += str.substr(i, 3);\n\t\t\ti += 3;\n\t\t}\n\t}\n\n\treturn newStr;\n}\n\nfunction _normalizeComponentEncoding(components:URIComponents, protocol:URIRegExps) {\n\tfunction decodeUnreserved(str:string):string {\n\t\tconst decStr = pctDecChars(str);\n\t\treturn (!decStr.match(protocol.UNRESERVED) ? str : decStr);\n\t}\n\n\tif (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, \"\");\n\tif (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace((components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME), pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\tif (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n\n\treturn components;\n};\n\nfunction _stripLeadingZeros(str:string):string {\n\treturn str.replace(/^0*(.*)/, \"$1\") || \"0\";\n}\n\nfunction _normalizeIPv4(host:string, protocol:URIRegExps):string {\n\tconst matches = host.match(protocol.IPV4ADDRESS) || [];\n\tconst [, address] = matches;\n\t\n\tif (address) {\n\t\treturn address.split(\".\").map(_stripLeadingZeros).join(\".\");\n\t} else {\n\t\treturn host;\n\t}\n}\n\nfunction _normalizeIPv6(host:string, protocol:URIRegExps):string {\n\tconst matches = host.match(protocol.IPV6ADDRESS) || [];\n\tconst [, address, zone] = matches;\n\n\tif (address) {\n\t\tconst [last, first] = address.toLowerCase().split('::').reverse();\n\t\tconst firstFields = first ? first.split(\":\").map(_stripLeadingZeros) : [];\n\t\tconst lastFields = last.split(\":\").map(_stripLeadingZeros);\n\t\tconst isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);\n\t\tconst fieldCount = isLastFieldIPv4Address ? 7 : 8;\n\t\tconst lastFieldsStart = lastFields.length - fieldCount;\n\t\tconst fields = Array<string>(fieldCount);\n\n\t\tfor (let x = 0; x < fieldCount; ++x) {\n\t\t\tfields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';\n\t\t}\n\n\t\tif (isLastFieldIPv4Address) {\n\t\t\tfields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);\n\t\t}\n\n\t\tconst allZeroFields = fields.reduce<Array<{index:number,length:number}>>((acc, field, index) => {\n\t\t\tif (!field || field === \"0\") {\n\t\t\t\tconst lastLongest = acc[acc.length - 1];\n\t\t\t\tif (lastLongest && lastLongest.index + lastLongest.length === index) {\n\t\t\t\t\tlastLongest.length++;\n\t\t\t\t} else {\n\t\t\t\t\tacc.push({ index, length : 1 });\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, []);\n\n\t\tconst longestZeroFields = allZeroFields.sort((a, b) => b.length - a.length)[0];\n\n\t\tlet newHost:string;\n\t\tif (longestZeroFields && longestZeroFields.length > 1) {\n\t\t\tconst newFirst = fields.slice(0, longestZeroFields.index) ;\n\t\t\tconst newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);\n\t\t\tnewHost = newFirst.join(\":\") + \"::\" + newLast.join(\":\");\n\t\t} else {\n\t\t\tnewHost = fields.join(\":\");\n\t\t}\n\n\t\tif (zone) {\n\t\t\tnewHost += \"%\" + zone;\n\t\t}\n\n\t\treturn newHost;\n\t} else {\n\t\treturn host;\n\t}\n}\n\nconst URI_PARSE = /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:([^\\/?#@]*)@)?(\\[[^\\/?#\\]]+\\]|[^\\/?#:]*)(?:\\:(\\d*))?))?([^?#]*)(?:\\?([^#]*))?(?:#((?:.|\\n|\\r)*))?/i;\nconst NO_MATCH_IS_UNDEFINED = (<RegExpMatchArray>(\"\").match(/(){0}/))[1] === undefined;\n\nexport function parse(uriString:string, options:URIOptions = {}):URIComponents {\n\tconst components:URIComponents = {};\n\tconst protocol = (options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL);\n\n\tif (options.reference === \"suffix\") uriString = (options.scheme ? options.scheme + \":\" : \"\") + \"//\" + uriString;\n\n\tconst matches = uriString.match(URI_PARSE);\n\n\tif (matches) {\n\t\tif (NO_MATCH_IS_UNDEFINED) {\n\t\t\t//store each component\n\t\t\tcomponents.scheme = matches[1];\n\t\t\tcomponents.userinfo = matches[3];\n\t\t\tcomponents.host = matches[4];\n\t\t\tcomponents.port = parseInt(matches[5], 10);\n\t\t\tcomponents.path = matches[6] || \"\";\n\t\t\tcomponents.query = matches[7];\n\t\t\tcomponents.fragment = matches[8];\n\n\t\t\t//fix port number\n\t\t\tif (isNaN(components.port)) {\n\t\t\t\tcomponents.port = matches[5];\n\t\t\t}\n\t\t} else {  //IE FIX for improper RegExp matching\n\t\t\t//store each component\n\t\t\tcomponents.scheme = matches[1] || undefined;\n\t\t\tcomponents.userinfo = (uriString.indexOf(\"@\") !== -1 ? matches[3] : undefined);\n\t\t\tcomponents.host = (uriString.indexOf(\"//\") !== -1 ? matches[4] : undefined);\n\t\t\tcomponents.port = parseInt(matches[5], 10);\n\t\t\tcomponents.path = matches[6] || \"\";\n\t\t\tcomponents.query = (uriString.indexOf(\"?\") !== -1 ? matches[7] : undefined);\n\t\t\tcomponents.fragment = (uriString.indexOf(\"#\") !== -1 ? matches[8] : undefined);\n\n\t\t\t//fix port number\n\t\t\tif (isNaN(components.port)) {\n\t\t\t\tcomponents.port = (uriString.match(/\\/\\/(?:.|\\n)*\\:(?:\\/|\\?|\\#|$)/) ? matches[4] : undefined);\n\t\t\t}\n\t\t}\n\n\t\tif (components.host) {\n\t\t\t//normalize IP hosts\n\t\t\tcomponents.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);\n\t\t}\n\n\t\t//determine reference type\n\t\tif (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {\n\t\t\tcomponents.reference = \"same-document\";\n\t\t} else if (components.scheme === undefined) {\n\t\t\tcomponents.reference = \"relative\";\n\t\t} else if (components.fragment === undefined) {\n\t\t\tcomponents.reference = \"absolute\";\n\t\t} else {\n\t\t\tcomponents.reference = \"uri\";\n\t\t}\n\n\t\t//check for reference errors\n\t\tif (options.reference && options.reference !== \"suffix\" && options.reference !== components.reference) {\n\t\t\tcomponents.error = components.error || \"URI is not a \" + options.reference + \" reference.\";\n\t\t}\n\n\t\t//find scheme handler\n\t\tconst schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n\n\t\t//check if scheme can't handle IRIs\n\t\tif (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n\t\t\t//if host component is a domain name\n\t\t\tif (components.host && (options.domainHost || (schemeHandler && schemeHandler.domainHost))) {\n\t\t\t\t//convert Unicode IDN -> ASCII IDN\n\t\t\t\ttry {\n\t\t\t\t\tcomponents.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());\n\t\t\t\t} catch (e) {\n\t\t\t\t\tcomponents.error = components.error || \"Host's domain name can not be converted to ASCII via punycode: \" + e;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//convert IRI -> URI\n\t\t\t_normalizeComponentEncoding(components, URI_PROTOCOL);\n\t\t} else {\n\t\t\t//normalize encodings\n\t\t\t_normalizeComponentEncoding(components, protocol);\n\t\t}\n\n\t\t//perform scheme specific parsing\n\t\tif (schemeHandler && schemeHandler.parse) {\n\t\t\tschemeHandler.parse(components, options);\n\t\t}\n\t} else {\n\t\tcomponents.error = components.error || \"URI can not be parsed.\";\n\t}\n\n\treturn components;\n};\n\nfunction _recomposeAuthority(components:URIComponents, options:URIOptions):string|undefined {\n\tconst protocol = (options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL);\n\tconst uriTokens:Array<string> = [];\n\n\tif (components.userinfo !== undefined) {\n\t\turiTokens.push(components.userinfo);\n\t\turiTokens.push(\"@\");\n\t}\n\n\tif (components.host !== undefined) {\n\t\t//normalize IP hosts, add brackets and escape zone separator for IPv6\n\t\turiTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, (_, $1, $2) => \"[\" + $1 + ($2 ? \"%25\" + $2 : \"\") + \"]\"));\n\t}\n\n\tif (typeof components.port === \"number\" || typeof components.port === \"string\") {\n\t\turiTokens.push(\":\");\n\t\turiTokens.push(String(components.port));\n\t}\n\n\treturn uriTokens.length ? uriTokens.join(\"\") : undefined;\n};\n\nconst RDS1 = /^\\.\\.?\\//;\nconst RDS2 = /^\\/\\.(\\/|$)/;\nconst RDS3 = /^\\/\\.\\.(\\/|$)/;\nconst RDS4 = /^\\.\\.?$/;\nconst RDS5 = /^\\/?(?:.|\\n)*?(?=\\/|$)/;\n\nexport function removeDotSegments(input:string):string {\n\tconst output:Array<string> = [];\n\n\twhile (input.length) {\n\t\tif (input.match(RDS1)) {\n\t\t\tinput = input.replace(RDS1, \"\");\n\t\t} else if (input.match(RDS2)) {\n\t\t\tinput = input.replace(RDS2, \"/\");\n\t\t} else if (input.match(RDS3)) {\n\t\t\tinput = input.replace(RDS3, \"/\");\n\t\t\toutput.pop();\n\t\t} else if (input === \".\" || input === \"..\") {\n\t\t\tinput = \"\";\n\t\t} else {\n\t\t\tconst im = input.match(RDS5);\n\t\t\tif (im) {\n\t\t\t\tconst s = im[0];\n\t\t\t\tinput = input.slice(s.length);\n\t\t\t\toutput.push(s);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unexpected dot segment condition\");\n\t\t\t}\n\t\t}\n\t}\n\n\treturn output.join(\"\");\n};\n\nexport function serialize(components:URIComponents, options:URIOptions = {}):string {\n\tconst protocol = (options.iri ? IRI_PROTOCOL : URI_PROTOCOL);\n\tconst uriTokens:Array<string> = [];\n\n\t//find scheme handler\n\tconst schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n\n\t//perform scheme specific serialization\n\tif (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);\n\n\tif (components.host) {\n\t\t//if host component is an IPv6 address\n\t\tif (protocol.IPV6ADDRESS.test(components.host)) {\n\t\t\t//TODO: normalize IPv6 address as per RFC 5952\n\t\t}\n\n\t\t//if host component is a domain name\n\t\telse if (options.domainHost || (schemeHandler && schemeHandler.domainHost)) {\n\t\t\t//convert IDN via punycode\n\t\t\ttry {\n\t\t\t\tcomponents.host = (!options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host));\n\t\t\t} catch (e) {\n\t\t\t\tcomponents.error = components.error || \"Host's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n\t\t\t}\n\t\t}\n\t}\n\n\t//normalize encoding\n\t_normalizeComponentEncoding(components, protocol);\n\n\tif (options.reference !== \"suffix\" && components.scheme) {\n\t\turiTokens.push(components.scheme);\n\t\turiTokens.push(\":\");\n\t}\n\n\tconst authority = _recomposeAuthority(components, options);\n\tif (authority !== undefined) {\n\t\tif (options.reference !== \"suffix\") {\n\t\t\turiTokens.push(\"//\");\n\t\t}\n\n\t\turiTokens.push(authority);\n\n\t\tif (components.path && components.path.charAt(0) !== \"/\") {\n\t\t\turiTokens.push(\"/\");\n\t\t}\n\t}\n\n\tif (components.path !== undefined) {\n\t\tlet s = components.path;\n\n\t\tif (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n\t\t\ts = removeDotSegments(s);\n\t\t}\n\n\t\tif (authority === undefined) {\n\t\t\ts = s.replace(/^\\/\\//, \"/%2F\");  //don't allow the path to start with \"//\"\n\t\t}\n\n\t\turiTokens.push(s);\n\t}\n\n\tif (components.query !== undefined) {\n\t\turiTokens.push(\"?\");\n\t\turiTokens.push(components.query);\n\t}\n\n\tif (components.fragment !== undefined) {\n\t\turiTokens.push(\"#\");\n\t\turiTokens.push(components.fragment);\n\t}\n\n\treturn uriTokens.join(\"\");  //merge tokens into a string\n};\n\nexport function resolveComponents(base:URIComponents, relative:URIComponents, options:URIOptions = {}, skipNormalization?:boolean):URIComponents {\n\tconst target:URIComponents = {};\n\n\tif (!skipNormalization) {\n\t\tbase = parse(serialize(base, options), options);  //normalize base components\n\t\trelative = parse(serialize(relative, options), options);  //normalize relative components\n\t}\n\toptions = options || {};\n\n\tif (!options.tolerant && relative.scheme) {\n\t\ttarget.scheme = relative.scheme;\n\t\t//target.authority = relative.authority;\n\t\ttarget.userinfo = relative.userinfo;\n\t\ttarget.host = relative.host;\n\t\ttarget.port = relative.port;\n\t\ttarget.path = removeDotSegments(relative.path || \"\");\n\t\ttarget.query = relative.query;\n\t} else {\n\t\tif (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n\t\t\t//target.authority = relative.authority;\n\t\t\ttarget.userinfo = relative.userinfo;\n\t\t\ttarget.host = relative.host;\n\t\t\ttarget.port = relative.port;\n\t\t\ttarget.path = removeDotSegments(relative.path || \"\");\n\t\t\ttarget.query = relative.query;\n\t\t} else {\n\t\t\tif (!relative.path) {\n\t\t\t\ttarget.path = base.path;\n\t\t\t\tif (relative.query !== undefined) {\n\t\t\t\t\ttarget.query = relative.query;\n\t\t\t\t} else {\n\t\t\t\t\ttarget.query = base.query;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (relative.path.charAt(0) === \"/\") {\n\t\t\t\t\ttarget.path = removeDotSegments(relative.path);\n\t\t\t\t} else {\n\t\t\t\t\tif ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n\t\t\t\t\t\ttarget.path = \"/\" + relative.path;\n\t\t\t\t\t} else if (!base.path) {\n\t\t\t\t\t\ttarget.path = relative.path;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget.path = base.path.slice(0, base.path.lastIndexOf(\"/\") + 1) + relative.path;\n\t\t\t\t\t}\n\t\t\t\t\ttarget.path = removeDotSegments(target.path);\n\t\t\t\t}\n\t\t\t\ttarget.query = relative.query;\n\t\t\t}\n\t\t\t//target.authority = base.authority;\n\t\t\ttarget.userinfo = base.userinfo;\n\t\t\ttarget.host = base.host;\n\t\t\ttarget.port = base.port;\n\t\t}\n\t\ttarget.scheme = base.scheme;\n\t}\n\n\ttarget.fragment = relative.fragment;\n\n\treturn target;\n};\n\nexport function resolve(baseURI:string, relativeURI:string, options?:URIOptions):string {\n\tconst schemelessOptions = assign({ scheme : 'null' }, options);\n\treturn serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);\n};\n\nexport function normalize(uri:string, options?:URIOptions):string;\nexport function normalize(uri:URIComponents, options?:URIOptions):URIComponents;\nexport function normalize(uri:any, options?:URIOptions):any {\n\tif (typeof uri === \"string\") {\n\t\turi = serialize(parse(uri, options), options);\n\t} else if (typeOf(uri) === \"object\") {\n\t\turi = parse(serialize(<URIComponents>uri, options), options);\n\t}\n\n\treturn uri;\n};\n\nexport function equal(uriA:string, uriB:string, options?: URIOptions):boolean;\nexport function equal(uriA:URIComponents, uriB:URIComponents, options?:URIOptions):boolean;\nexport function equal(uriA:any, uriB:any, options?:URIOptions):boolean {\n\tif (typeof uriA === \"string\") {\n\t\turiA = serialize(parse(uriA, options), options);\n\t} else if (typeOf(uriA) === \"object\") {\n\t\turiA = serialize(<URIComponents>uriA, options);\n\t}\n\n\tif (typeof uriB === \"string\") {\n\t\turiB = serialize(parse(uriB, options), options);\n\t} else if (typeOf(uriB) === \"object\") {\n\t\turiB = serialize(<URIComponents>uriB, options);\n\t}\n\n\treturn uriA === uriB;\n};\n\nexport function escapeComponent(str:string, options?:URIOptions):string {\n\treturn str && str.toString().replace((!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE), pctEncChar);\n};\n\nexport function unescapeComponent(str:string, options?:URIOptions):string {\n\treturn str && str.toString().replace((!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED), pctDecChars);\n};\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tconst parts = string.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tconst labels = string.split('.');\n\tconst encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = array => String.fromCodePoint(...array);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tlet oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tlet inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tlet basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue == n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nmodule.exports = punycode;\n","import { URIRegExps } from \"./uri\";\nimport { merge, subexp } from \"./util\";\n\nexport function buildExps(isIRI:boolean):URIRegExps {\n\tconst\n\t\tALPHA$$ = \"[A-Za-z]\",\n\t\tCR$ = \"[\\\\x0D]\",\n\t\tDIGIT$$ = \"[0-9]\",\n\t\tDQUOTE$$ = \"[\\\\x22]\",\n\t\tHEXDIG$$ = merge(DIGIT$$, \"[A-Fa-f]\"),  //case-insensitive\n\t\tLF$$ = \"[\\\\x0A]\",\n\t\tSP$$ = \"[\\\\x20]\",\n\t\tPCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)),  //expanded\n\t\tGEN_DELIMS$$ = \"[\\\\:\\\\/\\\\?\\\\#\\\\[\\\\]\\\\@]\",\n\t\tSUB_DELIMS$$ = \"[\\\\!\\\\$\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\=]\",\n\t\tRESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),\n\t\tUCSCHAR$$ = isIRI ? \"[\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\" : \"[]\",  //subset, excludes bidi control characters\n\t\tIPRIVATE$$ = isIRI ? \"[\\\\uE000-\\\\uF8FF]\" : \"[]\",  //subset\n\t\tUNRESERVED$$ = merge(ALPHA$$, DIGIT$$, \"[\\\\-\\\\.\\\\_\\\\~]\", UCSCHAR$$),\n\t\tSCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\") + \"*\"),\n\t\tUSERINFO$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\")) + \"*\"),\n\t\tDEC_OCTET$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"[1-9]\" + DIGIT$$) + \"|\" + DIGIT$$),\n\t\tDEC_OCTET_RELAXED$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"0?[1-9]\" + DIGIT$$) + \"|0?0?\" + DIGIT$$),  //relaxed parsing rules\n\t\tIPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$),\n\t\tH16$ = subexp(HEXDIG$$ + \"{1,4}\"),\n\t\tLS32$ = subexp(subexp(H16$ + \"\\\\:\" + H16$) + \"|\" + IPV4ADDRESS$),\n\t\tIPV6ADDRESS1$ = subexp(                                                            subexp(H16$ + \"\\\\:\") + \"{6}\" + LS32$), //                           6( h16 \":\" ) ls32\n\t\tIPV6ADDRESS2$ = subexp(                                                 \"\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{5}\" + LS32$), //                      \"::\" 5( h16 \":\" ) ls32\n\t\tIPV6ADDRESS3$ = subexp(subexp(                                 H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{4}\" + LS32$), //[               h16 ] \"::\" 4( h16 \":\" ) ls32\n\t\tIPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,1}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{3}\" + LS32$), //[ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n\t\tIPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,2}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{2}\" + LS32$), //[ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n\t\tIPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,3}\" + H16$) + \"?\\\\:\\\\:\" +        H16$ + \"\\\\:\"          + LS32$), //[ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n\t\tIPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,4}\" + H16$) + \"?\\\\:\\\\:\"                                + LS32$), //[ *4( h16 \":\" ) h16 ] \"::\"              ls32\n\t\tIPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,5}\" + H16$) + \"?\\\\:\\\\:\"                                + H16$ ), //[ *5( h16 \":\" ) h16 ] \"::\"              h16\n\t\tIPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,6}\" + H16$) + \"?\\\\:\\\\:\"                                       ), //[ *6( h16 \":\" ) h16 ] \"::\"\n\t\tIPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join(\"|\")),\n\t\tZONEID$ = subexp(subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$) + \"+\"),  //RFC 6874\n\t\tIPV6ADDRZ$ = subexp(IPV6ADDRESS$ + \"\\\\%25\" + ZONEID$),  //RFC 6874\n\t\tIPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + ZONEID$),  //RFC 6874, with relaxed parsing rules\n\t\tIPVFUTURE$ = subexp(\"[vV]\" + HEXDIG$$ + \"+\\\\.\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\") + \"+\"),\n\t\tIP_LITERAL$ = subexp(\"\\\\[\" + subexp(IPV6ADDRZ_RELAXED$ + \"|\" + IPV6ADDRESS$ + \"|\" + IPVFUTURE$) + \"\\\\]\"),  //RFC 6874\n\t\tREG_NAME$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$)) + \"*\"),\n\t\tHOST$ = subexp(IP_LITERAL$ + \"|\" + IPV4ADDRESS$ + \"(?!\" + REG_NAME$ + \")\" + \"|\" + REG_NAME$),\n\t\tPORT$ = subexp(DIGIT$$ + \"*\"),\n\t\tAUTHORITY$ = subexp(subexp(USERINFO$ + \"@\") + \"?\" + HOST$ + subexp(\"\\\\:\" + PORT$) + \"?\"),\n\t\tPCHAR$ = subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@]\")),\n\t\tSEGMENT$ = subexp(PCHAR$ + \"*\"),\n\t\tSEGMENT_NZ$ = subexp(PCHAR$ + \"+\"),\n\t\tSEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\@]\")) + \"+\"),\n\t\tPATH_ABEMPTY$ = subexp(subexp(\"\\\\/\" + SEGMENT$) + \"*\"),\n\t\tPATH_ABSOLUTE$ = subexp(\"\\\\/\" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + \"?\"),  //simplified\n\t\tPATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),  //simplified\n\t\tPATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),  //simplified\n\t\tPATH_EMPTY$ = \"(?!\" + PCHAR$ + \")\",\n\t\tPATH$ = subexp(PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n\t\tQUERY$ = subexp(subexp(PCHAR$ + \"|\" + merge(\"[\\\\/\\\\?]\", IPRIVATE$$)) + \"*\"),\n\t\tFRAGMENT$ = subexp(subexp(PCHAR$ + \"|[\\\\/\\\\?]\") + \"*\"),\n\t\tHIER_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n\t\tURI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n\t\tRELATIVE_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$),\n\t\tRELATIVE$ = subexp(RELATIVE_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n\t\tURI_REFERENCE$ = subexp(URI$ + \"|\" + RELATIVE$),\n\t\tABSOLUTE_URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\"),\n\n\t\tGENERIC_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tRELATIVE_REF$ = \"^(){0}\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tABSOLUTE_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?$\",\n\t\tSAMEDOC_REF$ = \"^\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n\t\tAUTHORITY_REF$ = \"^\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?$\"\n\t;\n\n\treturn {\n\t\tNOT_SCHEME : new RegExp(merge(\"[^]\", ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\"), \"g\"),\n\t\tNOT_USERINFO : new RegExp(merge(\"[^\\\\%\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_HOST : new RegExp(merge(\"[^\\\\%\\\\[\\\\]\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_PATH : new RegExp(merge(\"[^\\\\%\\\\/\\\\:\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_PATH_NOSCHEME : new RegExp(merge(\"[^\\\\%\\\\/\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tNOT_QUERY : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\", IPRIVATE$$), \"g\"),\n\t\tNOT_FRAGMENT : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\"), \"g\"),\n\t\tESCAPE : new RegExp(merge(\"[^]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n\t\tUNRESERVED : new RegExp(UNRESERVED$$, \"g\"),\n\t\tOTHER_CHARS : new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, RESERVED$$), \"g\"),\n\t\tPCT_ENCODED : new RegExp(PCT_ENCODED$, \"g\"),\n\t\tIPV4ADDRESS : new RegExp(\"^(\" + IPV4ADDRESS$ + \")$\"),\n\t\tIPV6ADDRESS : new RegExp(\"^\\\\[?(\" + IPV6ADDRESS$ + \")\" + subexp(subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + \"(\" + ZONEID$ + \")\") + \"?\\\\]?$\")  //RFC 6874, with relaxed parsing rules\n\t};\n}\n\nexport default buildExps(false);\n","export function merge(...sets:Array<string>):string {\n\tif (sets.length > 1) {\n\t\tsets[0] = sets[0].slice(0, -1);\n\t\tconst xl = sets.length - 1;\n\t\tfor (let x = 1; x < xl; ++x) {\n\t\t\tsets[x] = sets[x].slice(1, -1);\n\t\t}\n\t\tsets[xl] = sets[xl].slice(1);\n\t\treturn sets.join('');\n\t} else {\n\t\treturn sets[0];\n\t}\n}\n\nexport function subexp(str:string):string {\n\treturn \"(?:\" + str + \")\";\n}\n\nexport function typeOf(o:any):string {\n\treturn o === undefined ? \"undefined\" : (o === null ? \"null\" : Object.prototype.toString.call(o).split(\" \").pop().split(\"]\").shift().toLowerCase());\n}\n\nexport function toUpperCase(str:string):string {\n\treturn str.toUpperCase();\n}\n\nexport function toArray(obj:any):Array<any> {\n\treturn obj !== undefined && obj !== null ? (obj instanceof Array ? obj : (typeof obj.length !== \"number\" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj))) : [];\n}\n\n\nexport function assign(target: object, source: any): any {\n\tconst obj = target as any;\n\tif (source) {\n\t\tfor (const key in source) {\n\t\t\tobj[key] = source[key];\n\t\t}\n\t}\n\treturn obj;\n}"],"names":["mailto","wss","ws","https","http","handler","punycode","toUnicode","toASCII","encode","decode","ucs2encode","ucs2decode","regexNonASCII","test","string","mapDomain","input","regexPunycode","slice","toLowerCase","output","join","n","delta","handledCPCount","bias","adapt","handledCPCountPlusOne","basicLength","push","stringFromCharCode","digitToBasic","q","floor","qMinusT","baseMinusT","t","base","k","tMin","tMax","currentValue","error","maxInt","m","inputLength","delimiter","length","initialBias","initialN","String","fromCodePoint","splice","i","out","oldi","w","digit","basicToDigit","charCodeAt","index","basic","j","lastIndexOf","baseMinusTMin","skew","numPoints","firstTime","damp","flag","codePoint","array","value","counter","extra","result","encoded","map","labels","fn","split","replace","regexSeparators","parts","RangeError","errors","type","fromCharCode","Math"],"mappings":"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"}